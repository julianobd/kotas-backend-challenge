@page "/"
@using PokemonKotas.Domain.Dto
@using PokemonKotas.Domain.Interfaces
@using PokemonKotas.Web.Components
@inject IPokemonService PokemonService
<PageTitle>Home</PageTitle>

<h1 class="text-center my-4">Pokédex</h1>

<div class="search-container">
    <div class="input-group search-box">
        <input @bind="SearchPokemon" type="text" class="form-control" placeholder="Search Pokémon..." id="search">
        <button class="btn btn-primary" type="button" @onclick="FilterPokemon">Search</button>
    </div>
</div>


<h1 class="title-151">
    Só existem 151 Pokémons, <span class="highlight">por favor não insista!</span> 😡 <span class="spoiler">bom.. 152 se contar o missígno.</span>
</h1>

<div class="pokedex row justify-content-center">
    @foreach (var pokemon in GetPagedPokemons())
    {
        <div class="pokemon-card col-auto" data-bs-toggle="modal" data-bs-target="#pokemonModal" @onclick="@(() => ShowPokemonModal(pokemon))">
            <img src="@pokemon.Sprites.OrderBy(x => Guid.NewGuid()).FirstOrDefault()" alt="@pokemon.Name">
            <h5>@pokemon.Name.ToUpper()</h5>
        </div>
    }
</div>

<PokemonModal @ref="PokemonModal"/>


<ul class="pagination">
    <li class="@(CurrentPage == 1 ? "disabled" : "")"><a href="javascript:void(0);" @onclick="PreviousPage">Previous</a></li>
    
    @foreach (var i in GetPageNumbers())
    {
        <li class="page-item @(CurrentPage == i ? "active" : "")">
            <a class="page-link" href="javascript:void(0);" @onclick="() => { GoToPage(i); }">@i</a>
        </li>
    }
    <li class="@(CurrentPage == TotalPages ? "disabled" : "")"><a href="javascript:void(0);" @onclick="NextPage">Next</a></li>
</ul>

<div class="modal fade" id="pokemonModal" tabindex="-1" aria-labelledby="pokemonModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="pokemonModalLabel">Pokémon Info</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <h4 id="pokemonName"></h4>
                <p><strong>ID:</strong> <span id="pokemonId"></span></p>
                <p><strong>Type:</strong> <span id="pokemonType"></span></p>
            </div>
        </div>
    </div>
</div>

@code
{
    private string? SearchPokemon { get; set; }
    private PokemonModal? PokemonModal { get; set; }
    private List<PokemonDto> ListPokemons { get; set; } = [];
    private List<PokemonDto> FilteredPokemons { get; set; } = [];
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 20;
    private int TotalPages => (int)Math.Ceiling((double)FilteredPokemons.Count() / PageSize);
    private int MaxVisiblePages { get; set; } = 5;

    protected override async Task OnInitializedAsync()
    {
        ListPokemons = (await PokemonService.GetAllPokemons()).ToList();
        FilteredPokemons = ListPokemons;
    }


    private void ShowPokemonModal(PokemonDto pokemon)
    {
        PokemonModal?.ShowModal(pokemon);
    }

    private void FilterPokemon()
    {
        if (string.IsNullOrWhiteSpace(SearchPokemon))
        {
            FilteredPokemons = ListPokemons;
        }
        else
        {
            FilteredPokemons = ListPokemons
                .Where(x => x.Name.Contains(SearchPokemon, StringComparison.OrdinalIgnoreCase) || x.Id.ToString().Equals(SearchPokemon)).ToList();
        }
        CurrentPage = 1;
        StateHasChanged();
    }

    private IEnumerable<PokemonDto> GetPagedPokemons()
    {
        return FilteredPokemons
            .Skip((CurrentPage - 1) * PageSize)  
            .Take(PageSize);
    }

    private void GoToPage(int pageNumber)
    {
        CurrentPage = pageNumber;
        StateHasChanged();
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            StateHasChanged();
        }
    }

    private IEnumerable<int> GetPageNumbers()
    {
        int startPage = Math.Max(CurrentPage - MaxVisiblePages / 2, 1);
        int endPage = Math.Min(startPage + MaxVisiblePages - 1, TotalPages);

        if (endPage - startPage + 1 < MaxVisiblePages && startPage > 1)
        {
            startPage = Math.Max(endPage - MaxVisiblePages + 1, 1);
        }

        return Enumerable.Range(startPage, endPage - startPage + 1);
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
            StateHasChanged();
        }
    }
}
