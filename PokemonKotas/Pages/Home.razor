@page "/"
@using System.Diagnostics
@using PokemonKotas.Domain.Dto
@using PokemonKotas.Domain.Interfaces
@using PokemonKotas.Web.Components
@using PokemonKotas.Web.Services
@inject IPokemonService PokemonService
@inject SessionService SessionService
@inject WebClientService WebClientService

<PageTitle>Home</PageTitle>

<h1 class="text-center my-4">Pokédex</h1>

<div class="search-container">
    <div class="input-group search-box">
        <input @bind="SearchPokemon" @oninput="e => SearchPokemon = e.Value?.ToString()" @onkeypress="SearchOnEnter" type="text" class="form-control" placeholder="Search Pokémon..." id="search">
        <button class="btn btn-primary" type="button" @onclick="FilterPokemon">Search</button>
    </div>
</div>


<h1 class="title-151">
    There are only 151 Pokémons, <span class="highlight">please don't insist!</span> 😡
</h1>


<div class="pokedex row justify-content-center">
    @foreach (var pokemon in CapturedPokemons)
    {
        <div class="pokemon-card @(pokemon.IsMythical ? "mythical" : pokemon.IsLegendary ? "legendary" : "") col-auto" data-bs-toggle="modal" data-bs-target="#pokemonModal" @onclick="@(() => ShowPokemonModal(pokemon))">
            <img src="@pokemon.Sprites.OrderBy(x => Guid.NewGuid()).FirstOrDefault()" alt="@pokemon.Name">
            <h5 class="@(pokemon.IsMythical || pokemon.IsLegendary ? "shiny-text" : "")">@pokemon.Name.ToUpper()</h5>
            <span class="badge bg-info">Captured</span>
        </div>
    }
</div>

<div class="pokedex row justify-content-center">
    @foreach (var pokemon in GetPagedPokemons())
    {
        <div class="pokemon-card @(pokemon.IsMythical ? "mythical" : pokemon.IsLegendary ? "legendary" : "") col-auto" data-bs-toggle="modal" data-bs-target="#pokemonModal" @onclick="@(() => ShowPokemonModal(pokemon))">
            <img src="@pokemon.Sprites.OrderBy(x => Guid.NewGuid()).FirstOrDefault()" alt="@pokemon.Name">
            <h5 class="@(pokemon.IsMythical || pokemon.IsLegendary ? "shiny-text" : "")">@pokemon.Name.ToUpper()</h5>
        </div>
    }
</div>

<PokemonModal @ref="PokemonModal"/>
<TrainersModal @ref="TrainersModal"/>

<ul class="pagination">
    <li class="@(CurrentPage == 1 ? "disabled" : "")">
        <a id="PreviousPage" href="javascript:void(0);" @onclick="PreviousPage">Previous</a>
    </li>

    @foreach (var i in GetPageNumbers())
    {
        <li class="page-item @(CurrentPage == i ? "active" : "")">
            <a class="page-link" href="javascript:void(0);" @onclick="() => { GoToPage(i); }">@i</a>
        </li>
    }
    <li class="@(CurrentPage == TotalPages ? "disabled" : "")">
        <a id="NextPage" href="javascript:void(0);" @onclick="NextPage">Next</a>
    </li>
</ul>

<div class="show-trainers-container">
    <button class="btn-show-trainers" @onclick="ShowRanking">Show Top 10 Trainers</button>
</div>

@if (IsLoading)
{
    <div class="pokemon-loader">
        <div class="pokeball"></div>
        <p>Capturando Pokémon...</p>
    </div>
}

@code
{
    private string? SearchPokemon { get; set; }
    private PokemonModal? PokemonModal { get; set; }
    private TrainersModal? TrainersModal { get; set; }
    private List<PokemonDto> ListPokemons { get; set; } = [];
    private List<PokemonDto> FilteredPokemons { get; set; } = [];
    private List<PokemonDto> CapturedPokemons { get; set; } = [];
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; } = 20;
    private int TotalPages => (int)Math.Ceiling((double)FilteredPokemons.Count() / PageSize);
    private int MaxVisiblePages { get; } = 5;
    private bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ListPokemons = (await PokemonService.GetAllPokemons()).ToList();
        FilteredPokemons = ListPokemons;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var masterId = await SessionService.GetMasterId();
            if (masterId != null)
            {
                var masterPokemonDto = await WebClientService.GetAsync<MasterPokemonDto>($"MasterPokemon/Get/{masterId}");
                if (masterPokemonDto is not null && masterPokemonDto.CapturedPokemons.Any())
                {
                    CapturedPokemons = masterPokemonDto.CapturedPokemons;
                }
            }
        }
    }

    private Task ShowRanking()
    {
        TrainersModal?.ShowModal(SetLoading);
        return Task.CompletedTask;
    }

    private void ShowPokemonModal(PokemonDto pokemon)
    {
        PokemonModal?.ShowModal(pokemon, CapturedPokemons, CallbackOnClose, SetLoading);
    }

    private Task CallbackOnClose()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task SetLoading(bool value)
    {
        IsLoading = value;
        StateHasChanged();
        return Task.CompletedTask;
    }


    private void FilterPokemon()
    {
        Debug.WriteLine(SearchPokemon);
        if (string.IsNullOrWhiteSpace(SearchPokemon))
        {
            FilteredPokemons = ListPokemons;
        }
        else
        {
            FilteredPokemons = ListPokemons
                .Where(x => x.Name.Contains(SearchPokemon, StringComparison.OrdinalIgnoreCase) || x.Id.ToString().Equals(SearchPokemon)).ToList();
        }

        CurrentPage = 1;
        StateHasChanged();
    }

    private IEnumerable<PokemonDto> GetPagedPokemons()
    {
        return FilteredPokemons
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize) ?? [];
    }

    private void GoToPage(int pageNumber)
    {
        CurrentPage = pageNumber;
        StateHasChanged();
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            StateHasChanged();
        }
    }

    private IEnumerable<int> GetPageNumbers()
    {
        var startPage = Math.Max(CurrentPage - MaxVisiblePages / 2, 1);
        var endPage = Math.Min(startPage + MaxVisiblePages - 1, TotalPages);

        if (endPage - startPage + 1 < MaxVisiblePages && startPage > 1)
        {
            startPage = Math.Max(endPage - MaxVisiblePages + 1, 1);
        }

        return Enumerable.Range(startPage, endPage - startPage + 1);
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
            StateHasChanged();
        }
    }

    private void SearchOnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") // Verifica se a tecla pressionada foi Enter
        {
            FilterPokemon();
        }
    }
}